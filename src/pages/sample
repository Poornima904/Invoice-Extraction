import React, { useState, useCallback, useEffect } from "react";
import { FiEye, FiDownload, FiTrash2 } from "react-icons/fi";

export default function UploadPage({
  setActivePage,
  uploads,
  setUploads,
  setSelectedInvoice,
}) {
  const [highlightIds, setHighlightIds] = useState([]);
  const [isUploading, setIsUploading] = useState(false);
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [country, setCountry] = useState("India");
  const [vendor, setVendor] = useState("USA default");
  const [uploadComplete, setUploadComplete] = useState(false);
  const [vendors, setVendors] = useState([]); // dynamic vendor list
  const [loadingVendors, setLoadingVendors] = useState(false); // optional loader

  const fetchVendors = async (selectedCountry) => {
    setLoadingVendors(true);
    try {
      const myHeaders = new Headers();
      myHeaders.append(
        "Authorization",
        "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZTM1OWQ0YzMxODI0NDIwODcwZDExMSIsInJvbGUiOiJBZG1pbiIsImlhdCI6MTc2MDMzMTkwNywiZXhwIjoxNzYwNDE4MzA3fQ.jkEZSSxdRAGsQbMJpUXpjYqO5hCErbVylm3DZuqCxwA"
      );

      const requestOptions = {
        method: "GET",
        headers: myHeaders,
        redirect: "follow",
      };

      const url = `http://192.168.0.102:5050/api/vendors?country=${encodeURIComponent(
        selectedCountry
      )}&active=true`;

      const response = await fetch(url, requestOptions);
      if (!response.ok) throw new Error("Failed to fetch vendors");

     
    const data = await response.json();

    // Map vendor_name from the API response
    const vendorNames = (data || []).map((v) => v.vendor_name);
    setVendors(vendorNames);
    console.log(vendors)

    } catch (error) {
      console.error("Error fetching vendors:", error);
      setVendors([]);
    } finally {
      setLoadingVendors(false);
    }
  };
  useEffect(() => {
    if (country) {
      fetchVendors(country);
      setVendor(""); // reset vendor selection when country changes
    }
  }, [country]);

  const fetchInvoices = async () => {
    try {
      const response = await fetch("http://192.168.0.102:5050/api/invoices1", {
        method: "GET",
        headers: {
          Authorization:
            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZTM1OWQ0YzMxODI0NDIwODcwZDExMSIsInJvbGUiOiJBZG1pbiIsImlhdCI6MTc2MDI5NTk3MSwiZXhwIjoxNzYwMzgyMzcxfQ.hFKT12Eh6D8x-u-2ncAB4MFDBRcZZK1UcfY7zmFGoK8",
          "Content-Type": "application/json",
        },
      });
      if (!response.ok) throw new Error("Network response was not ok");
      const data = await response.json();
      const mappedData = (data.invoices || []).map((item) => ({
        id: item._id || "--",
        fileName: item.pdf_file_name,
        uploadDate: item.createdAt ? item.createdAt.slice(0, 10) : "—",
        vendor: item.headers?.Vendor_Name || "—",
        amount:
          item.headers?.Total_Amount !== undefined
            ? `₹${item.headers.Total_Amount.toLocaleString()}`
            : "—",
        status: item.status,
        fileUrl: item.pdf_blob_url,
      }));
      setUploads(mappedData);
      const today = new Date().toISOString().slice(0, 10);
      const highlightToday = mappedData
        .filter((f) => f.uploadDate === today)
        .map((f) => f.id);
      setHighlightIds(highlightToday);
    } catch (error) {
      console.error("Error fetching invoices:", error);
    }
  };

  useEffect(() => {
    fetchInvoices();
    const interval = setInterval(fetchInvoices, 5000);
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    if (uploads.length > 0) {
      localStorage.setItem("uploads", JSON.stringify(uploads));
    }
  }, [uploads]);

  // File logic
  const handleFiles = useCallback((files) => {
    const pdfFiles = Array.from(files).filter((file) => {
      if (file.type !== "application/pdf") {
        alert(`${file.name} is not a PDF.`);
        return false;
      }
      if (file.size > 50 * 1024 * 1024) {
        alert(`${file.name} exceeds 50MB limit.`);
        return false;
      }
      return true;
    });
    if (!pdfFiles.length) return;
    setSelectedFiles((prev) => [
      ...prev,
      ...pdfFiles.filter((f) => !prev.find((x) => x.name === f.name)),
    ]);
  }, []);

   // Download button logic (restored)
  const handleDownload = (upload) => {
    try {
      if (upload.file) {
        const url = URL.createObjectURL(upload.file);
        const link = document.createElement("a");
        link.href = url;
        link.download = upload.fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
      } else if (upload.fileUrl) {
        const apiUrl = `http://192.168.0.102:5050/download/remote?url=${encodeURIComponent(
          upload.fileUrl
        )}&filename=${encodeURIComponent(upload.fileName || "downloaded_file")}`;
        const link = document.createElement("a");
        link.href = apiUrl;
        link.download = upload.fileName || "downloaded_file";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      } else {
        alert("No file available to download.");
      }
    } catch (error) {
      console.error("Download failed:", error);
    }
  };

  // View button logic (restored)
  const handleView = (upload) => {
    setSelectedInvoice(upload.id);
    if (upload.status === "Needs Review" || upload.status === "Processed") {
      setActivePage("Review");
    } else if (upload.status === "Processing" || upload.status === "Failed") {
      setActivePage("Processing");
    } else {
      setActivePage("Dashboard");
    }
  };


  const handleDrop = (e) => {
    e.preventDefault();
    handleFiles(e.dataTransfer.files);
  };
  const handleDragOver = (e) => e.preventDefault();
  const handleChooseFile = (e) => {
    handleFiles(e.target.files);
    e.target.value = "";
  };

  const deleteFile = (name) => {
    setSelectedFiles((prev) => prev.filter((f) => f.name !== name));
  };

  const handleUploadFile = async () => {
    debugger
    if (!selectedFiles.length) return;
    setIsUploading(true);
    try {
      for (const file of selectedFiles) {
        const myHeaders = new Headers();
        myHeaders.append(
          "Authorization",
          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZTM1OWQ0YzMxODI0NDIwODcwZDExMSIsInJvbGUiOiJBZG1pbiIsImlhdCI6MTc2MDI5NTk3MSwiZXhwIjoxNzYwMzgyMzcxfQ.hFKT12Eh6D8x-u-2ncAB4MFDBRcZZK1UcfY7zmFGoK8"
        );
        const formdata = new FormData();
        formdata.append("pdf", file, file.name);
        formdata.append("country", country);
        formdata.append("vendor", vendor);
        formdata.append("save_metadata", "true");
        formdata.append("vision_header", "false");
        formdata.append("vision_item", "true");
        const requestOptions = {
          method: "POST",
          headers: myHeaders,
          body: formdata,
          redirect: "follow",
        };
        const response = await fetch(
          "http://192.168.0.102:5050/api/invoices1",
          requestOptions
        );
        if (!response.ok) {
          const errorText = await response.text();
          console.error("Upload failed:", response.status, errorText);
          throw new Error("Upload failed");
        }
      }
      alert("File(s) uploaded successfully!");
      fetchInvoices();
      setSelectedFiles([]);
      setUploadComplete(true);
    } catch (error) {
      alert("Failed to upload file.");
      console.error("❌ Error uploading file:", error);
    } finally {
      setIsUploading(false);
    }
  };

  // Utility for file size formatting
  const humanFileSize = (size) => {
    if (size < 1024) return size + " B";
    if (size < 1024 * 1024) return (size / 1024).toFixed(1) + " KB";
    return (size / (1024 * 1024)).toFixed(1) + " MB";
  };

  return (
    <div className="max-w-9xl mx-auto p-7 font-sans overflow-x-hidden">
      {/* === UPLOAD BOX === */}
      <div
        className="border-2 border-dashed rounded-xl bg-[#E9FFF6] p-10 flex flex-col items-center transition"
        onDrop={handleDrop}
        onDragOver={handleDragOver}
        style={{ borderColor: "#47D8E0" }}
      >
        <div className="mb-4">
          <div className="w-14 h-14 flex items-center justify-center bg-gradient-to-tr from-[#7C6BFA] to-[#47D8E0] rounded-full shadow-lg">
            <svg
              className="w-8 h-8"
              viewBox="0 0 24 24"
              fill="none"
              stroke="#fff"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <path d="M12 19V5M5 12l7-7 7 7" />
            </svg>
          </div>
        </div>
        <div className="text-xl font-semibold text-gray-800 mb-1">
          Drop your PDF invoices here
        </div>
        <div className="text-gray-500 text-sm mb-4">
          or click below to browse and select files
        </div>
        <input
          type="file"
          id="fileInput"
          multiple
          accept="application/pdf"
          className="hidden"
          onChange={handleChooseFile}
        />
        <label
          htmlFor="fileInput"
          className="px-7 py-2 rounded bg-gradient-to-tr from-[#6E98FF] to-[#47D8E0] text-white font-semibold shadow cursor-pointer hover:from-[#6951E6] hover:to-[#2DBFCB]"
        >
          Choose Files
        </label>
        <div className="text-xs text-gray-400 mt-4">
          Supports batch upload • PDF files only • Max 50MB per file
        </div>
      </div>
      {/* === FILE CARDS/DROPDOWN/UPLOAD BUTTON BELOW === */}
      {selectedFiles.length > 0 && !isUploading && !uploadComplete && (
        <div className="mt-6 px-2 max-w-9xl mx-auto">
          <div className="mb-4 font-semibold text-gray-700">
            Ready to Upload ({selectedFiles.length} file
            {selectedFiles.length > 1 ? "s" : ""}):
          </div>
          <div className="space-y-2 mb-6">
            {selectedFiles.map((file) => (
              <div
                key={file.name}
                className="flex items-center bg-white border rounded-lg px-4 py-3 shadow transition justify-between"
              >
                <div className="flex items-center gap-3 w-3/4 truncate">
                  <span className="bg-green-100 text-green-700 rounded-full p-2 mr-2">
                    <svg width={20} height={20} fill="none" viewBox="0 0 24 24">
                      <rect width="24" height="24" rx="6" fill="#DEF7EC" />
                      <path
                        d="M7 17V6.5c0-.28.22-.5.5-.5h7c.28 0 .5.22.5.5V17"
                        stroke="#38B2AC"
                        strokeWidth="1.5"
                      />
                      <path
                        d="M9 13h6M9 12h.01"
                        stroke="#38B2AC"
                        strokeWidth="1.2"
                      />
                    </svg>
                  </span>
                  <div className="flex flex-col truncate">
                    <span className="font-medium text-gray-800 truncate">
                      {file.name}
                    </span>
                    <span className="text-xs text-gray-400">
                      {humanFileSize(file.size)}
                    </span>
                  </div>
                </div>
                <button
                  onClick={() => deleteFile(file.name)}
                  className="ml-auto text-gray-400 hover:text-red-600 transition-colors p-2 rounded"
                  aria-label="Delete"
                >
                  <FiTrash2 size={18} />
                </button>
              </div>
            ))}
          </div>
          <div className="flex gap-5 mb-6">
            <div className="w-1/2">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Country
              </label>
              <select
                value={country}
                onChange={(e) => setCountry(e.target.value)}
                className="w-full border-gray-300 rounded-md shadow-sm px-3 py-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
              >
                <option value="India">India</option>
                <option value="USA">USA</option>
              </select>
            </div>
            <div className="w-1/2">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Vendor
              </label>
              <select
                value={vendor}
                onChange={(e) => setVendor(e.target.value)}
                disabled={loadingVendors || vendors.length === 0}
                className="w-full border-gray-300 rounded-md shadow-sm px-3 py-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
              >
                <option value="" disabled>
                  {loadingVendors ? "Loading..." : "Select Vendor"}
                </option>
                {vendors.map((v) => (
                  <option key={v} value={v}>
                    {v}
                  </option>
                ))}
              </select>
            </div>
          </div>
          <button
            onClick={handleUploadFile}
            className="w-full py-3 rounded-lg text-lg font-semibold bg-gradient-to-r from-[#53DEBA] to-[#7C6BFA] text-white shadow-md transition hover:from-[#47D8E0] hover:to-[#6951E6]"
            disabled={isUploading}
          >
            Upload {selectedFiles.length} File
            {selectedFiles.length > 1 ? "s" : ""}
          </button>
        </div>
      )}
      {isUploading && (
        <div className="absolute inset-0 bg-black/30 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded shadow text-lg font-semibold">
            Uploading file(s), please wait...
          </div>
        </div>
      )}
      {/* === RECENT UPLOADS TABLE BELOW === */}
      <div className="bg-white rounded-xl shadow p-4 mt-7 space-y-4 overflow-x-hidden">
        <h3 className="text-lg font-semibold mb-2">Recent Uploads</h3>
        {uploads.length === 0 && (
          <p className="text-center text-gray-400">No uploads yet.</p>
        )}
        <div className="hidden sm:block overflow-x-auto">
          <table className="w-full table-auto divide-y divide-gray-200 text-sm sm:text-base">
            <thead>
              <tr>
                {[
                  "File Name",
                  "Upload Date",
                  "Vendor",
                  "Amount",
                  "Status",
                  "Actions",
                ].map((header) => (
                  <th
                    key={header}
                    className="px-2 py-2 text-left font-semibold text-black-700 whitespace-nowrap bg-grey-100"
                  >
                    {header}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {uploads.map((upload, idx) => {
                const rowClass = highlightIds.includes(upload.id)
                  ? "bg-green-100 text-blue-500 font-bold border-green-400"
                  : idx % 2 === 0
                  ? "bg-white"
                  : "bg-gray-50";
                return (
                  <tr
                    key={upload.id}
                    className={`transition-colors duration-300 cursor-pointer ${rowClass}`}
                  >
                    <td className="px-2 py-2">{upload.fileName}</td>
                    <td className="px-2 py-2">{upload.uploadDate}</td>
                    <td className="px-2 py-2">{upload.vendor || "—"}</td>
                    <td className="px-2 py-2">{upload.amount || "—"}</td>
                    <td className="px-2 py-2">
                      <span
                        className={`inline-flex items-center px-2 py-1 text-xs font-semibold rounded-full transition-colors duration-300 ${
                          upload.status === "Processed"
                            ? "bg-green-100 text-green-800"
                            : upload.status === "Needs Review"
                            ? "bg-yellow-100 text-yellow-800"
                            : upload.status === "Processing"
                            ? "bg-blue-100 text-blue-800"
                            : upload.status === "Failed"
                            ? "bg-red-100 text-red-700"
                            : "bg-gray-200 text-gray-700"
                        }`}
                      >
                        {upload.status}
                      </span>
                    </td>
                    <td className="px-2 py-2 flex gap-2 justify-center">
                      <button
                       onClick={() => handleView(upload)}
                     
                        className="p-1 border border-gray-300 rounded hover:bg-indigo-100 text-gray-700 transition flex items-center justify-center"
                        aria-label="View"
                        title="View"
                      >
                        <FiEye size={18} />
                      </button>
                      <button
                        onClick={() => handleDownload(upload)}
                        className="p-1 border border-gray-300 rounded hover:bg-indigo-100 text-gray-700 transition flex items-center justify-center"
                        aria-label="Download"
                        title="Download"
                      >
                        <FiDownload size={18} />
                      </button>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
it should be responsive